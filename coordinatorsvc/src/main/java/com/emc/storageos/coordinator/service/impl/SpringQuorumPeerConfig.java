/*
 * Copyright (c) 2008-2011 EMC Corporation
 * All Rights Reserved
 */

package com.emc.storageos.coordinator.service.impl;


import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Properties;
import java.util.Set;

import org.apache.zookeeper.server.quorum.QuorumPeerConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.emc.storageos.coordinator.exceptions.CoordinatorException;

public class SpringQuorumPeerConfig extends QuorumPeerConfig {
    private static final Logger log = LoggerFactory.getLogger(SpringQuorumPeerConfig.class);
    private static final String SERVER_ID_FILE = "myid";
    public static final String staticCfgFileKey= "staticConfigFile";
    public static final String dynamicCfgFileKey= "dynamicConfigFile";

    private int _id;
    private Properties _properties;

    public void setMachineId(int id) {
        _id = id;
    }

    public void setProperties(Properties properties) {
        _properties = properties;
    }

    public void init() throws ConfigException, IOException {
        String dataDirName = (String) _properties.get("dataDir");

        //create zk data directory if it doesn't exist
        dataDir = new File(dataDirName);
        if (!dataDir.exists()) {
            if (!dataDir.mkdirs()) {
                throw CoordinatorException.fatals
                        .unableToCreateServerIDDirectories(dataDir.getAbsolutePath());
            }
        }

        //create zk server id file if it doesn't exist
        File serverId = new File(dataDirName, SERVER_ID_FILE);
        if (!serverId.exists()) {
            FileWriter writer = new FileWriter(serverId);
            writer.write(Integer.toString(_id));
            writer.close();
        }

        Properties staticProperties = new Properties();
        String staticConfigFileName = null;

        Properties dynamicProperties = new Properties();
        String dynamicConfigFileName = null;

        Set<String> propertyNames = _properties.stringPropertyNames();
        for (String propertyName : propertyNames) {
            String value = _properties.getProperty(propertyName);
            if (propertyName.equals(staticCfgFileKey)) {
                staticConfigFileName = dataDirName+"/"+value;
                continue;
            }

            if (propertyName.startsWith("server.")) {
                dynamicProperties.setProperty(propertyName, value);
                continue;
            }

            if (propertyName.equals(dynamicCfgFileKey)) {
                dynamicConfigFileName = dataDirName+"/"+value;
                value = dynamicConfigFileName;
            }

            staticProperties.setProperty(propertyName, value);
        }

        //persist the static/dynamic config file
        FileOutputStream out = new FileOutputStream(staticConfigFileName);
        staticProperties.store(out, "Don't edit this file, it's auto generated by SpringQuorumPeerConfig.init()");

        out = new FileOutputStream(dynamicConfigFileName);
        dynamicProperties.store(out, "Don't edit this file, it's auto generated by SpringQuorumPeerConfig.init()");

        log.info("Persist the static/dynamic config file to {} and {}", staticConfigFileName, dynamicConfigFileName);
        parse(staticConfigFileName);
    }
}
