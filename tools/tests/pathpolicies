#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
import json
from bourne import Bourne

#----------------------------------------------------------------------
# pathpolicies cli functions
#----------------------------------------------------------------------

def pathparams_create(args):
    bourne.connect(args.ip)
    path_param = dict()
    path_param['name'] = args.name
    path_param['max_paths'] = args.maxpaths
    path_param['min_paths'] = args.minpaths
    path_param['paths_per_initiator'] = args.pathsperinitiator
    if (args.maxinitperport):
        path_param['max_initiators_per_port'] = args.maxinitperport
    if (args.description):
        path_param['description'] = args.description
    bourne.export_path_policies_create(path_param)

def pathparams_update(args):
    list_all='false'
    if args.list_all:
        list_all=args.list_all
    bourne.connect(args.ip)
    res = bourne.export_path_policies_list(list_all)
    for id in res:
        pathparam = bourne.export_path_policies_get(id)
        if (pathparam['name'] == args.name):
            path_param = dict()
            path_param['name'] = args.name
            path_param['max_paths'] = args.maxpaths
            path_param['min_paths'] = args.minpaths
	    if (args.description):
	        path_param['description'] = args.description
            if (args.maxinitperport):
                path_param['max_initiators_per_port'] = args.maxinitperport
            path_param['paths_per_initiator'] = args.pathsperinitiator
            bourne.export_path_policies_update(id, path_param)

def pathparameters_list(args):
    list_all='false'
    if args.list_all:
        list_all=args.list_all
    bourne.connect(args.ip)
    res = bourne.export_path_policies_list(list_all)
    path_display_hdr()
    for id in res:
        pathparam = bourne.export_path_policies_get(id)
        path_display(pathparam)

def pathparameters_delete(args):
    list_all='false'
    if args.list_all:
        list_all=args.list_all
    bourne.connect(args.ip)
    res = bourne.export_path_policies_list(list_all)
    for id in res:
        pathparam = bourne.export_path_policies_get(id)
        if (pathparam['name'] == args.name):
            bourne.export_path_policies_delete(id)

#
# display path parameters in list form
#
path_fmt=    '{0:40s} {1:4d} {2:4d} {3:4d} {4:4d} {5:72} {6:60s}'
path_fmt_hdr='{0:40s} {1:4s} {2:4s} {3:4s} {4:4s} {5:72} {6:60s}'

def path_display_hdr():
    print path_fmt_hdr.format('name', ' min', ' max', ' ppi', 'mipp', 'id', 'description')

def path_display(path):
    try:
        desc = path['description']
    except:
        desc = ''
    print path_fmt.format(path['name'], path['min_paths'], path['max_paths'], path['paths_per_initiator'], path['max_initiators_per_port'], path['id'], desc)

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------
try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# pathparams <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne pathpolicies cli usage.')
parser.add_argument('cmd', help = 'cmd = (create|update|delete|list|show)')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)
parser.add_argument('--list_all', help='list implicitly created also')

# pathparams create label minpaths maxpaths pathsperinitiator
create = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
create.add_argument('name', help = 'name for this policy')
create.add_argument('minpaths', help = 'minimum paths')
create.add_argument('maxpaths', help = 'maximum paths')
create.add_argument('pathsperinitiator', help = 'paths per initiator')
create.add_argument('--description', help='description')
create.add_argument('--maxinitperport', help='description')

# pathparams update name 
update = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
update.add_argument('name', help = 'name for this policy')
update.add_argument('minpaths', help = 'minimum paths')
update.add_argument('maxpaths', help = 'maximum paths')
update.add_argument('pathsperinitiator', help = 'paths per initiator')
update.add_argument('--description', help='description')
update.add_argument('--maxinitperport', help='description')

# pathparams delete name
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name',	help = 'name of policy to be deleted')

# pathparams list 
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')


#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------
try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "create"):
        args = create.parse_args()
        pathparams_create(args)
    elif (cmd == "update"):
        args = update.parse_args()
        pathparams_update(args)
    elif (cmd == "list"):
        args = list.parse_args()
        pathparameters_list(args)
    elif (cmd == "delete"):
        args = delete.parse_args()
        pathparameters_delete(args)
    else:
        parser.print_help()

except:
    raise

