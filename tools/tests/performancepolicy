#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
import bourne as _bourne
from bourne import Bourne
import __builtin__

#----------------------------------------------------------------------
# performance policy functions
#----------------------------------------------------------------------

def pp_create(args):
    bourne.connect(args.ip)

    autoTierPolicy = None
    if (args.auto_tiering_policy_name):
   	 autoTierPolicy = ' '.join(args.auto_tiering_policy_name)

    pp = bourne.pp_create(args.name, args.description, autoTierPolicy, args.host_io_limit_bandwidth, args.host_io_limit_iops,
                          args.thin_vol_prealloc_percentage, args.compression_enabled, args.fast_expansion_enabled, args.deduplication_enabled)
    print pp

def pp_update(args):
    bourne.connect(args.ip)
    pp_uri = bourne.pp_query(args.name)

    autoTierPolicy = None
    if (args.auto_tiering_policy_name):
   	 autoTierPolicy = ' '.join(args.auto_tiering_policy_name)

    pp = bourne.pp_update(pp_uri, args.new_name, args.description, autoTierPolicy, args.host_io_limit_bandwidth, args.host_io_limit_iops,
                          args.thin_vol_prealloc_percentage, args.compression_enabled, args.fast_expansion_enabled, args.deduplication_enabled)
    print pp

def pp_delete(args):
    bourne.connect(args.ip)
    uri = bourne.pp_query(args.name)
    res = bourne.pp_delete(uri)
    print res

def pp_show(args):
    bourne.connect(args.ip)
    uri = bourne.pp_query(args.name)
    pp = bourne.pp_show(uri)
    bourne.pretty_print_json(pp)

def pp_query(args):
    bourne.connect(args.ip)
    print bourne.pp_query(args.name)

def pp_list(args):
    bourne.connect(args.ip)
    pp_display_hdr()
    pp_list = bourne.pp_list()
    for pp in pp_list:
        pp = bourne.pp_show(pp['id'])
        pp_display(pp)

def pp_allow(args):
    bourne.connect(args.ip)
    uri = bourne.pp_query(args.name)
    res = bourne.pp_add_acl(uri, args.tenant)
    print res

def pp_tag(args):
    bourne.connect(args.ip)
    if (args.id == None):
        args.id = bourne.pp_query(args.name)

    print 'Tagging performance policy ', args.id
    bourne.tag(args.resource_type, args.id, args.tags)

def pp_search(args):
    bourne.connect(args.ip)
    array = bourne.search(args.resource_type, args.scope, args.prefix, args.project, args.tag)
    print 'Searching performance policy with ' + args.prefix
    if (len(array) == 0):
        raise Exception('Failed to search with prefix ' + args.prefix)
    else:
        print 'Result: ', array

def pp_verify_volume(args):
    bourne.connect(args.ip)
    voluri = bourne.volume_query(args.name)
    value = ' '.join(args.value)
    if (args.attribute == "auto_tier_policy"):
        if (value == "NONE"):
            bourne.volume_verify_no_value(voluri, args.attribute)
        else:
            atp_uri = bourne.pp_atp_query(value)
            bourne.volume_verify(voluri, args.attribute, atp_uri)
    elif (args.attribute == "performance_policy"):
        pp_uri = bourne.pp_query(value)
        bourne.volume_verify(voluri, args.attribute, pp_uri)

def pp_verify_mirror(args):
    bourne.connect(args.ip)
    volumeuri = bourne.volume_query(args.volumename)
    mirroruri = bourne.block_mirror_get_id_by_name(args.volumename, args.mirrorname)
    value = ' '.join(args.value)
    if (args.attribute == "auto_tier_policy"):
        atp_uri = bourne.pp_atp_query(value)
        bourne.block_mirror_verify(volumeuri, mirroruri, args.attribute, atp_uri)
    elif (args.attribute == "performance_policy"):
        pp_uri = bourne.pp_query(value)
        bourne.block_mirror_verify(volumeuri, mirroruri, args.attribute, pp_uri)

pp_display_fmt = '{0:16s} {1:8s} {2:75s} {3:s}'

def pp_display_hdr():
    print pp_display_fmt.format('name', 'active', 'id', 'description')

def pp_display(pp):
    try:
       descr = pp['description']
       print pp_display_fmt.format(pp['name'], 'NO' if pp['inactive'] else 'YES', pp['id'], descr)
    except:
       descr="No description"
       print pp_display_fmt.format(pp['name'], 'NO' if pp['inactive'] else 'YES', pp['id'], "No Description")


#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# pp <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne Performance Policy cli usage.')
parser.add_argument('cmd', help = 'cmd = (create | update delete | show | query | list | allow | tag | search)')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# pp create name
create = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
create.add_argument('name',	help = 'The name of the performance policy instance to be created')
create.add_argument('--description', help = 'Description for the performance policy instance')
create.add_argument('--auto_tiering_policy_name', help = 'The auto tiering policy name', nargs='*') 
create.add_argument('--host_io_limit_bandwidth', help = 'The VMAX host IO bandwidth limit in Mb/second')
create.add_argument('--host_io_limit_iops', help = 'The VMAX host IO IOPs limit')
create.add_argument('--thin_vol_prealloc_percentage', help='The pre-allocation percentage for thinly provisioned volumes')
create.add_argument('--compression_enabled', help='The compression setting for VMAX all FLASH array')
create.add_argument('--fast_expansion_enabled', help='The fast expansion setting')
create.add_argument('--deduplication_enabled', help='The deduplication setting')

# pp update name
update = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
update.add_argument('name',	help = 'The name of the performance policy instance to be updated')
update.add_argument('--new_name', help = 'The new name for the performance policy instance')
update.add_argument('--description', help = 'Description for the performance policy instance')
update.add_argument('--auto_tiering_policy_name', help = 'The auto tiering policy name', nargs='*') 
update.add_argument('--host_io_limit_bandwidth', help = 'The VMAX host IO bandwidth limit in Mb/second')
update.add_argument('--host_io_limit_iops', help = 'The VMAX host IO IOPs limit')
update.add_argument('--thin_vol_prealloc_percentage', help='The pre-allocation percentage for thinly provisioned volumes')
update.add_argument('--compression_enabled', help='The compression setting for VMAX all FLASH array')
update.add_argument('--fast_expansion_enabled', help='The fast expansion setting')
update.add_argument('--deduplication_enabled', help='The deduplication setting')

# pp delete name
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name',	help = 'The name of the performance policy instance to be deleted')

# pp show name
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name', help = 'The name of the performance policy instance to be shown')

# pp query name
query = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
query.add_argument('name', help = 'The name of the performance policy instance to be queried')

# pp list
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')

# pp allow name tenant
allow = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
allow.add_argument('name', help = 'The name of the performance policy instance')
allow.add_argument('tenant', help = 'The name of the tenant to allow access to the performance policy instance')

# pp tag
resource_type="block_performance_policy"
tag = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
tag.add_argument('name', metavar = 'name', help = 'The name of the performance policy instance')
tag.add_argument('tags', metavar = 'tags', help = 'The tags to be applied to the instance', nargs='+', default=None)
tag.add_argument('--resource_type', metavar = 'resource_type', help = 'The resource type', default=resource_type)
tag.add_argument('--id', metavar = 'id', help = 'The resource id', default=None)

# pp search
search = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
search.add_argument('prefix', metavar = 'prefix', help = 'The prefix for search i.e., name or tag')
search.add_argument('--resource_type', metavar = 'resource_type', help = 'The resource type', default=resource_type)
search.add_argument('--scope', metavar = 'scope', help = 'The scope for searching i.e., global or tenant', default=None)
search.add_argument('--tag', metavar = 'tag', help = 'boolean for search tag or not (search from name)', default=None)
search.add_argument('--project', metavar = 'project', help = 'The project to search', default=None)

# pp verify_volume name attribute value
verify_volume = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
verify_volume.add_argument('name', help = 'The name of the volume to be verified')
verify_volume.add_argument('attribute', help = 'The name of the volume attribute to be verified')
verify_volume.add_argument('value', help = 'The attribute value to be verified', nargs='*')

# pp verify_mirror volumename mirrorname attribute value
verify_mirror = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
verify_mirror.add_argument('volumename', help = 'The name of the source volume for the block mirror')
verify_mirror.add_argument('mirrorname', help = 'The name of the block mirror to be verified')
verify_mirror.add_argument('attribute', help = 'The name of the block mirror attribute to be verified')
verify_mirror.add_argument('value', help = 'The attribute value to be verified', nargs='*')

#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "create"):
        args = create.parse_args()
        pp_create(args)
    elif (cmd == "update"):
        args = update.parse_args()
        pp_update(args)
    elif (cmd == "delete"):
        args = delete.parse_args()
        pp_delete(args)
    elif (cmd == "show"):
        args = show.parse_args()
        pp_show(args)
    elif (cmd == "query"):
        args = query.parse_args()
        pp_query(args)
    elif (cmd == "list"):
        args = list.parse_args()
        pp_list(args)
    elif (cmd == "allow"):
        args = allow.parse_args()
        pp_allow(args)
    elif(cmd == "tag"):
        args = tag.parse_args()
        pp_tag(args)
    elif(cmd == "search"):
        args = search.parse_args()
        pp_search(args)
    elif(cmd == "verify_volume"):
        args = verify_volume.parse_args()
        pp_verify_volume(args)
    elif(cmd == "verify_mirror"):
        args = verify_mirror.parse_args()
        pp_verify_mirror(args)
    else:
        parser.print_help()
except:
    raise

