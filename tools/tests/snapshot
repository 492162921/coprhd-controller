#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
from bourne import Bourne

#----------------------------------------------------------------------
# snapshot cli functions
#----------------------------------------------------------------------

def snapshot_create(args):
    bourne.connect(args.ip)
    fileshare_uri = bourne.fileshare_query(args.fileshare)
    s = bourne.snapshot_create(fileshare_uri, args.label)
    if (s['state'] == 'ready'):
        print 'Fileshare snapshot created with id ' + s['resource']['id']
    else:
        print 'Fileshare snapshot create failed.'

def snapshot_delete(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    res = bourne.snapshot_delete(uri)
    print res

def snapshot_export(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    #(o, s) = bourne.snapshot_export(uri, args.host)
    s = bourne.snapshot_export(uri, args.endpoints, args.type, args.perm, args.rootuser,
                                     args.protocol)
 
    if (s['state'] == 'ready'):
        print 'Fileshare snapshot export done.'
    else:
        print 'Fileshare snapshot export failed.'

def snapshot_unexport(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    s = bourne.snapshot_unexport(uri)
    if (s['state'] == 'ready'):
        print 'Fileshare snapshot unexport done.'
    else:
        print 'Fileshare snapshot unexport failed.'

def snapshot_restore(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    s = bourne.snapshot_restore(uri)
    if (s['state'] == 'ready'):
        print 'Fileshare restore from snapshot done.'
    else:
        print 'Fileshare restore from snapshot failed.'

def snapshot_share(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    s = bourne.snapshot_share(uri, args.sharename, args.description, args.perm)
    if (s['state'] == 'ready'):
        print 'Snapshot SMB share create done.'
    else:
        print 'Snapshot SMB share create failed.'

def snapshot_share_acl(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    s = bourne.snapshot_share_acl(uri, args.sharename, args.user, args.permission, args.domain, args.group, args.operation)
    if (s['state'] == 'ready'):
        print 'Snapshot SMB share  ACL create done.'
    else:
        print 'Snapshot SMB share ACL create failed.'

def snapshot_acl_show(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    snap_acl = bourne.snapshot_acl_show(uri, args.sharename)
    bourne.pretty_print_json(snap_acl)

def snapshot_acl_delete(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    s = bourne.snapshot_acl_delete(uri, args.sharename)
    if (s['state'] == 'ready'):
        print 'Snapshot ACL delete done.'
    else:
        print 'Snapshot ACL delete failed.'

def snapshot_unshare(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    s = bourne.snapshot_unshare(uri, args.sharename)
    if (s['state'] == 'ready'):
        print 'Snapshot unshare done.'
    else:
        print 'Snapshot unshare failed.'

def snapshot_share_list(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    shares = bourne.snapshot_share_list(uri)
    print shares


def snapshot_list(args):
    bourne.connect(args.ip)
    fileshare_uri = bourne.fileshare_query(args.fileshare)
    snapshots = bourne.snapshot_list(fileshare_uri)
    for snap in snapshots:
        snapshot = bourne.snapshot_show(snap['id'], fileshare_uri)
	print snapshot

def snapshot_show(args):
    bourne.connect(args.ip)
    uri = bourne.snapshot_query(args.name, args.fname)
    snapshot = bourne.snapshot_show(uri)
    print snapshot

def snapshot_query(args):
    bourne.connect(args.ip)
    print bourne.snapshot_query(args.name, args.fname)

def snapshot_tag(args):
    bourne.connect(args.ip)
    if (args.id == None):
        args.id = bourne.snapshot_query(args.name, args.fname)
    print 'Tagging snapshot ', args.id
    bourne.tag(args.resource_type, args.id, args.tags)

def snapshot_search(args):
    bourne.connect(args.ip)
    if (args.scope != None):
        # query tenant id from tenant name
        args.scope = bourne.tenant_query(args.scope)
    array = bourne.search(args.resource_type, args.scope, args.prefix, args.project, args.tag)
    print 'Searching snapshot with ' + args.prefix
    if (len(array) == 0):
        raise Exception('Failed to search with prefix ' + args.prefix)
    else:
        print 'Result: ', array

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# snap cmd cmd_args [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne snapshot cli usage.')
parser.add_argument('cmd', help = 'cmd = (create | delete | list | export | unexport | restore)')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# snapshot create fsuri snaplabel [--ip ipaddr]
create = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
create.add_argument('fileshare', help = 'name of fileshare for snapshot')
create.add_argument('label', help = 'label for snapshot')

# snapshot delete uri [--ip ipaddr]
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('name', help = 'name of snapshot')
delete.add_argument('fname', help = 'name of fileshare')

# snapshot export uri host [--ip ipaddr]
export = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
export.add_argument('name',             help = 'name of snapshot for export/unexport')
export.add_argument('fname', help = 'name of fileshare')
export.add_argument('endpoints',        help = 'list of client endpoints (ip|net|netgroup)', nargs='*')
export.add_argument('--type',           help = 'security type (sys | krb5 | krb5i | krb5p), default sys',
                                        default='sys')
export.add_argument('--perm',           help = 'file share access permissions (ro | rw | root), default ro',
                                        default = 'ro')
export.add_argument('--rootuser',       help = 'root user mapping for anonymous accesses, default nobody',
                                   default = 'nobody')
export.add_argument('--protocol',       help = 'access protocol for this export (NFS | CIFS), default NFS',
                                        default = 'NFS')
# snapshot unexport uri host [--ip ipaddr]
unexport = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
unexport.add_argument('name',             help = 'name of snapshot for unexport')
unexport.add_argument('fname', help = 'name of fileshare')


export_modify = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
export_modify.add_argument('name',             help = 'name of snapshot for export/unexport')
export_modify.add_argument('fname', help = 'name of fileshare')
export_modify.add_argument('endpoints',        help = 'list of client endpoints (ip|net|netgroup)', nargs='*')
export_modify.add_argument('--type',           help = 'security type (sys | krb5 | krb5i | krb5p), default sys',
                                        default='sys')
export_modify.add_argument('--perm',           help = 'file share access permissions (ro | rw | root), default ro',
                                        default = 'ro')
export_modify.add_argument('--rootuser',       help = 'root user mapping for anonymous accesses, default nobody',
                                   default = 'root')
export_modify.add_argument('--protocol',       help = 'access protocol for this export (NFS | CIFS), default NFS',
                                        default = 'NFS')

# snapshot restore uri [--ip ipaddr]
restore = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
restore.add_argument('name', help = 'name of snapshot')
restore.add_argument('fname', help = 'name of fileshare')

# snapshot share uri fname sharename
share = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
share.add_argument('name',		help = 'name of snapshot for share/unshare')
share.add_argument('fname', help = 'name of filesystem')
share.add_argument('sharename',		help = 'sharename to share/unshare')
share.add_argument('--description',		help = 'description')
share.add_argument('--perm',             help = 'permission')

#snapshot share_acl uri sharename
share_acl = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
share_acl.add_argument('name',        help = 'name of snapshot for share ACL')
share_acl.add_argument('fname', help = 'name of filesystem for which snapshot belongs')
share_acl.add_argument('sharename',        help = 'sharename to set ACL')
share_acl.add_argument('--user',        help = 'user for which setting permission ')
share_acl.add_argument('--permission',        help = 'permission type')
share_acl.add_argument('--domain',        help = 'Domain for the ACL', default = '')
share_acl.add_argument('--group',        help = 'Group for the ACL', default = '')
share_acl.add_argument('--operation',        help = 'operation to be performed Add,Modify,Delete for ACL')

#snapshot ACL show uri sharename
share_acl_show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
share_acl_show.add_argument('name',        help = 'name of snapshot')
share_acl_show.add_argument('fname', help = 'name of filesystem for which snapshot belongs')
share_acl_show.add_argument('sharename',        help = 'Snapshot  sharename to show ACL')

#snapshot ACL Delete uri sharename
share_acl_delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
share_acl_delete.add_argument('name',        help = 'name of snapshot for share ACl delete')
share_acl_delete.add_argument('fname', help = 'name of filesystem for which snapshot belongs')
share_acl_delete.add_argument('sharename',        help = 'Snapshot  sharename to delete ACL')

# snapshot unshare uri fname sharename
unshare = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
unshare.add_argument('name',		help = 'name of snapshot for share/unshare')
unshare.add_argument('fname', help = 'name of filesystem')
unshare.add_argument('sharename',		help = 'sharename to share/unshare')

# snapshot list   fsuri [--ip ipaddr]
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
list.add_argument('fileshare', help = 'name of fileshare for snapshot lists')

# snapshot share_list uri fname [--ip ipaddr]
share_list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
share_list.add_argument('name', help = 'name of snapshot')
share_list.add_argument('fname', help = 'name of fileshare')

# snapshot show   uri [--ip ipaddr]
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name', help = 'name of snapshot')
show.add_argument('fname', help = 'name of fileshare')

# snapshot query   uri [--ip ipaddr]
query = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
query.add_argument('name', help = 'Full pathname of snapshot')

# tag 
resource_type="snapshot"
tag = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
tag.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
tag.add_argument('--id',     metavar = 'id',     help = 'resource id', default=None)
tag.add_argument('name',     metavar = 'name',   help = 'resource name')
tag.add_argument('fname',    metavar = 'fname',  help = 'name of fileshare')
tag.add_argument('tags',     metavar = 'tags',   help = 'tags', nargs='+', default=None)

# search
search = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
search.add_argument('--resource_type',   metavar = 'resource_type',     help = 'resource type', default=resource_type)
search.add_argument('--scope',   metavar = 'scope',  help = 'scope(global or tenant) for searching', default=None)
search.add_argument('prefix',    metavar = 'prefix', help = 'prefix for search name or tag')
search.add_argument('--tag',     metavar = 'tag',    help = 'boolean for search tag or not (search from name)', default=None)
search.add_argument('--project', metavar = 'project',help = 'search name within project', default=None)


#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "create"):
        args = create.parse_args()
        snapshot_create(args)
    elif (cmd == "delete"):
        args = delete.parse_args()
        snapshot_delete(args)
    elif (cmd == "export"):
        args = export.parse_args()
        snapshot_export(args)
    elif (cmd == "export_modify"):
        args = export_modify.parse_args()
        snapshot_export(args)
    elif (cmd == "unexport"):
        args = unexport.parse_args()
        snapshot_unexport(args)
    elif (cmd == "restore"):
        args = restore.parse_args()
        snapshot_restore(args)
    elif (cmd == "list"):
        args = list.parse_args()
        snapshot_list(args)
    elif (cmd == "share"):
        args = share.parse_args()
        snapshot_share(args)
    elif (cmd == "share_acl"):
        args = share_acl.parse_args()
        snapshot_share_acl(args)
    elif (cmd == "share_acl_show"):
        args = share_acl_show.parse_args()
        snapshot_acl_show(args)
    elif (cmd == "share_acl_delete"):
        args = share_acl_delete.parse_args()
        snapshot_acl_delete(args)
    elif (cmd == "unshare"):
        args = unshare.parse_args()
        snapshot_unshare(args)
    elif (cmd == "share_list"):
        args = share_list.parse_args()
        snapshot_share_list(args)
    elif (cmd == "show"):
        args = show.parse_args()
        snapshot_show(args)
    elif (cmd == "query"):
        args = query.parse_args()
        snapshot_query(args)
    elif(cmd == "tag"):
        args = tag.parse_args()
        snapshot_tag(args)
    elif(cmd == "search"):
        args = search.parse_args()
        snapshot_search(args)
    else:
        parser.print_help()

except:
    raise
