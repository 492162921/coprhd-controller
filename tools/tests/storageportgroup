#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
from bourne import Bourne

#----------------------------------------------------------------------
# storage port group functions
#----------------------------------------------------------------------
def storageportgroup_query(args):
    bourne.connect(args.ip)
    print bourne.storageport_query(args.name)

def storageportgroup_list(args):
    bourne.connect(args.ip)
    sduri  = bourne.storagedevice_querybynativeguid(args.storage)
    storageportgroups = bourne.storageportgroup_list(sduri)
    for pg in storageportgroups:
        id = pg['id']
        portgroup = bourne.storageportgroup_show(sduri, id)
        port_group_display(portgroup)


def storageport_register(args):
    bourne.connect(args.ip)
    (systemname, portgroupname) = args.name.split('/', 1)
    sduri  = bourne.storagedevice_query(systemname)
    portgroupuris = bourne.storageportgroup_list(sduri)
    for portgroupuri in portgroupuris:
        portgroup = bourne.storageportgroup_show(sduri, portgroupuri['id'])
        if (portgroup['portgroupname'] == args.portgroup):
            portgroup = bourne.storageportgroup_register(uri, portgroupuri['id'])
            print portgroup

def storageport_deregister(args):
    bourne.connect(args.ip)
    (systemname, portgroupname) = args.name.split('/', 1)
    sduri  = bourne.storagedevice_query(args.systemname)
    portgroupuris = bourne.storageportgroup_list(sduri)
    for portgroupuri in portgroupuris:
        portgroup = bourne.storageportgroup_show(sduri, portgroupuri['id'])
        if (portgroup['portgroupname'] == args.portgroup):
            portgroup = bourne.storageportgroup_register(uri, portgroupuri['id'])
            print portgroup

def storageportgroup_show(args):
    bourne.connect(args.ip)
    name = args.name
    (systemname, portgroupname) = name.split('/', 1)
    systemuri  = bourne.storagedevice_query(systemname)
    portgroupuri  = bourne.storageportgroup_query(name)
    portgroup = bourne.storageportgroup_show(systemuri, portgroupuri)
    print portgroup



#
# display storage port group in list form
#
port_group_display_fmt = '{0:4s} {1:16s} {2:16s} {3:40s}'




def port_group_display(pg):
    
    try:
        portMetric = "{0:04.1f}".format(pg['port_metric'])
    except:
        portMetric = '---'
    try:
        volumeCnt = str(pg['volume_count'])
    except:
        volumeCnt = '---'
    
    print port_group_display_fmt.format(pg['name'], pg['registration_status'], portMetric, volumeCnt)




#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# storageportgroup <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne storage port group cli usage.')
parser.add_argument('cmd', help = 'cmd = (show | list | register | deregister | query)')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# port group register
register = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
register.add_argument('name',    help = 'Port group name')

# port group list name
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
list.add_argument('storage',	help = 'storage system name')

# port group show name
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('name',	help = 'storage port group name');

# port group query name
query = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
query.add_argument('name',	help = 'storage port group name')

# port deregister name
deregister = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
deregister.add_argument('name',	help = 'storage port name')



#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "show"):
        args = show.parse_args()
        storageportgroup_show(args)
    elif (cmd == "query"):
        args = query.parse_args()
        storageportgroup_query(args)
    elif (cmd == "list"):
        args = list.parse_args()
        storageportgroup_list(args)
    elif (cmd == "register"):
        args = register.parse_args()
        storageportgroup_register(args) 
    elif (cmd == "deregister"):
        args = deregister.parse_args()
        storageportgroup_deregister(args) 
    else:
        parser.print_help()
except:
    raise

