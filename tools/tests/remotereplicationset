#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
import time
from bourne import Bourne

#----------------------------------------------------------------------
# remotereplicatingset functions
#----------------------------------------------------------------------

# list sets
def remotereplicationset_list(args):
    bourne.connect(args.ip)
    sets = bourne.replicationset_list()
    for set in sets:
        print set

def remotereplicationset_failover(args):
    bourne.connect(args.ip)

    replicationset_uri = bourne.replicationset_query(args.replicationset_name)
    print 'Replication set uri: ' + replicationset_uri

    s = bourne.replicationset_failover(replicationset_uri)
    if (s['state'] == 'ready'):
        print 'Failed over remote replication set with id ' + s['resource']['id']
    else:
        print 'Failed to failover remote replication set.'

def remotereplicationset_suspend(args):
    bourne.connect(args.ip)

    replicationset_uri = bourne.replicationset_query(args.replicationset_name)
    print 'Replication set uri: ' + replicationset_uri
    s = bourne.replicationset_suspend(replicationset_uri)
    if (s['state'] == 'ready'):
        print 'Suspended remote replication set with id ' + s['resource']['id']
    else:
        print 'Failed to suspend remote replication set.'

def remotereplicationset_resume(args):
    bourne.connect(args.ip)

    replicationset_uri = bourne.replicationset_query(args.replicationset_name)
    print 'Replication set uri: ' + replicationset_uri
    s = bourne.replicationset_resume(replicationset_uri)
    if (s['state'] == 'ready'):
        print 'Resumed remote replication set with id ' + s['resource']['id']
    else:
        print 'Failed to resume remote replication set.'

def remotereplicationset_failback(args):
    bourne.connect(args.ip)

    replicationset_uri = bourne.replicationset_query(args.replicationset_name)
    print 'Replication set uri: ' + replicationset_uri
    s = bourne.replicationset_failback(replicationset_uri)
    if (s['state'] == 'ready'):
        print 'Failed back remote replication set with id ' + s['resource']['id']
    else:
        print 'Failed to failback remote replication set.'

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# remotereplicationgroup cmd cmd_args [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne remotereplication set cli usage.')
parser.add_argument('cmd', help = 'cmd = (create )')
parser.add_argument('--ip',	metavar = 'ipaddr',	help = 'IP address of bourne', default=bourne_ip)

# remote replication set list
list = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')

# remotereplicationset operations
operation = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
operation.add_argument('replicationset_name', help = 'The name of the replication group.')

#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "list"):
        args = list.parse_args()
        remotereplicationset_list(args)
    elif (cmd == "failover"):
        args = operation.parse_args()
        remotereplicationset_failover(args)
    elif (cmd == "suspend"):
        args = operation.parse_args()
        remotereplicationset_suspend(args)
    elif (cmd == "resume"):
        args = operation.parse_args()
        remotereplicationset_resume(args)
    elif (cmd == "failback"):
        args = operation.parse_args()
        remotereplicationset_failback(args)
    else:
        parser.print_help()

except:
    raise
