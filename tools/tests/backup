#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.
#

import argparse
import sys
import os
from bourne import Bourne
import sysmgr as SysMgr

#----------------------------------------------------------------------
# backup cli functions
#----------------------------------------------------------------------

def create_backup(args):
    bourne.connect(args.ip)
    bourne.create_backup(args.name)

def delete_backup(args):
    bourne.connect(args.ip)
    bourne.delete_backup(args.name)

def list_backup(args):
    bourne.connect(args.ip)
    backuparray = bourne.list_backup()
    if backuparray is None:
        print None
    elif backuparray['backupsets_info'] is None:
        print None
    else:
        for backup in backuparray['backupsets_info']:
            if(backup['name'] == args.name):
                print backup['name']

def list_external_backup(args):
    bourne.connect(args.ip)
    backuparray = bourne.list_external_backup()
    if backuparray is None:
        print None
    elif backuparray['backups'] is None:
        print None
    else:
        for backup in backuparray['backups']:
            if(backup.startswith(args.name)):
                print backup

def download_backup(args):
    bourne.connect(args.ip)
    if (args.filepath.endswith(".zip") is False):
        args.filepath += ".zip"
    response=bourne.download_backup(args.name)
    filename=args.filepath
    if (filename):
        with open(filename, 'wb') as fp:
            fp.write(str(response))

def upload_backup(args):
    bourne.connect(args.ip)
    response=bourne.upload_backup(args.name)

def query_upload_backup(args):
    bourne.connect(args.ip)
    status=bourne.query_upload_backup(args.name)
    if status is None:
        print None
    else:
        print status['upload_status']['status']

def query_backup_info(args):
    bourne.connect(args.ip)
    info=bourne.query_backup_info(args.name, args.isLocal)
    print info

def pull_backup(args):
    bourne.connect(args.ip)
    response=bourne.pull_backup(args.name)

def query_pull_backup(args):
    bourne.connect(args.ip)
    status=bourne.query_pull_backup(args.name, args.isLocal)
    if status is None:
        print None
    else:
        print status['status']

def restore_backup(args):
    bourne.connect(args.ip)
    response=bourne.restore_backup(args.name, args.isLocal, args.password)
    print response

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# backup [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne tenant cli usage.')
parser.add_argument('cmd',
  help = 'cmd = (create | list | list-external | delete | download | upload | query-upload | query-info | pull | query-pull | restore)')

parser.add_argument('--ip', metavar = 'ipaddr', help = 'IP address of bourne', default=bourne_ip)

# create backup
backupcreate = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backupcreate.add_argument('name', help = 'name of backup file', type=str)

# list local backup
backuplist = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backuplist.add_argument('name', help = 'name of backup file', type=str)

# list external backup
backuplistexternal = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backuplistexternal.add_argument('name', help = 'name of backup file', type=str)

# delete backup
backupdelete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backupdelete.add_argument('name', help = 'name of backup file', type=str)

# download backup
backupdownload = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backupdownload.add_argument('name', help = 'name of backup file', type=str)
backupdownload.add_argument('filepath', help= 'path of target file', type=str)

# upload backup
backupupload = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backupupload.add_argument('name', help = 'name of backup file', type=str)

# query upload backup
backupquery_upload = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backupquery_upload.add_argument('name', help = 'name of backup file', type=str)

# query backup info
backupquery_info = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backupquery_info.add_argument('name', help = 'name of backup file', type=str)
backupquery_info.add_argument('isLocal', help = 'local or remote backup', type=str)

# pull backup
backuppull = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backuppull.add_argument('name', help = 'name of backup file', type=str)

# query_pull backup
backupquery_pull = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backupquery_pull.add_argument('name', help = 'name of backup file', type=str)
backupquery_pull.add_argument('isLocal', help = 'local or remote backup', type=str)

# restore backup
backuprestore = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
backuprestore.add_argument('name', help = 'name of backup file', type=str)
backuprestore.add_argument('isLocal', help = 'local or remote backup', type=str)
backuprestore.add_argument('password', help = 'root password', type=str)

#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:
    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "create"):
        args = backupcreate.parse_args()
        create_backup(args)
    elif (cmd == "list"):
        args = backuplist.parse_args()
        list_backup(args)
    elif (cmd == "list-external"):
        args = backuplistexternal.parse_args()
        list_external_backup(args)
    elif (cmd == "delete"):
        args = backupdelete.parse_args()
        delete_backup(args)
    elif (cmd == "download"):
        args = backupdownload.parse_args()
        download_backup(args)
    elif (cmd == "upload"):
        args = backupupload.parse_args()
        upload_backup(args)
    elif (cmd == "query-upload"):
        args = backupquery_upload.parse_args()
        query_upload_backup(args)
    elif (cmd == "query-info"):
        args = backupquery_info.parse_args()
        query_backup_info(args)
    elif (cmd == "pull"):
        args = backuppull.parse_args()
        pull_backup(args)
    elif (cmd == "query-pull"):
        args = backupquery_pull.parse_args()
        query_pull_backup(args)
    elif (cmd == "restore"):
        args = backuprestore.parse_args()
        restore_backup(args)
    else:
        parser.print_help()
except:
    raise
