#!/bin/sh
#
# Copyright (c) 2016 EMC Corporation
# All Rights Reserved
#


# Save the command arguments
ARGC=$#
[ $ARGC -eq 0 ] && {
    echo "usage: vplexsrdf config_file bourne_ip"
    exit 2;
}

CONFIG_FILE=""
# ============================================================
# Check if there is a sanity configuration file specified
# on the command line. In, which case, we should use that
# ============================================================
if [ "$1"x != "x" ]; then
   if [ -f "$1" ]; then
      CONFIG_FILE=$1
      echo Using sanity configuration file $CONFIG_FILE
      source $CONFIG_FILE
      shift
   fi
fi
sconf=$(dirname $CONFIG_FILE)

# TODO: remove this once Nathan commits
subs/duvalidation false

if [ "$1"x != "x" ]; then
      BOURNE_IP=$1
      echo Using BOURNE_IP $BOURNE_IP
      shift
else
      BOURNE_IP=127.0.0.1
fi

ARGV=$*
CWD=$(pwd)
export PATH=$CWD:$PATH
echo "PATH: " $PATH

if [ "$password" = "" ]; then
    source subs/loginconfigure
    login_nd_configure_smtp_nd_add_licenses
else
    security login root $password
fi

export project=ap
source subs/tenantProject 
export tenant=`tenant root`

# Configuration file to be used  
source $CONFIG_FILE 

# Variables about volumes
BLK_SIZE=${BLK_SIZE:-1073741824}

source subs/run

# Subroutines for comparing the paths
pathadj() {
    echoit "export_group pathadj $*"  
    export_group pathadj $*  | tee .pathadj.out
    grep '^+' .pathadj.out | awk ' { print $2, $3, $4; }' | sort >.pathadj.cmp1
}

egpaths() {
    echoit "egpaths $*"
    $CWD/egpaths $* | tee .egpath.out
    grep '\.org' .egpath.out | awk ' { print $1, $2, $5; }' | sort >.pathadj.cmp2
    diff .pathadj.cmp1 .pathadj.cmp2
    rc=$?
    if [ $rc -ne 0 ] ; then
        diff .pathadj.cmp1 .pathadj.cmp2
	fail "Unexpected path differences"
    fi
}

verifyzones() {
    zones=$(grep '\.org' .egpath.out } awk ' { print $6; }')
    zone list ciscosim --fabricid 11 >.zones.out
    zone list ciscosim --fabricid 12 >.zones.out
    for zone in $zones; do
       grep $zone .zones.out
       notfound=$?
       if [ $notfound -get 0 ]; then
           fail "Missing zone: " $zone
       fi
    done
}

verifynozones() {
    zone list ciscosim --fabricid 11 >.zones.out
    zone list ciscosim --fabricid 12 >.zones.out
    num=$(grep .org .zones.out | wc -l)
    if [ $num -gt 0 ]; then
        echo "left-over zones:"
	cat .zones.out
        fail "left-over zones"
    fi
}

source subs/discovery
source $sconf/simvplexvmax.conf
vplex=$(storagedevice list | grep VPLEX+FNM0013090030 |  awk ' {print $2; }')
echo VPLEX $vplex
source subs/mkvplexvarrays 
SITE1=VPLEX+FNM00130900300_FNM00130900301_cluster1 
SITE2=VPLEX+FNM00130900300_FNM00130900301_cluster2
source subs/hosts
clusterName=clus${hostseed}
cluster_create $clusterName
clusterId=$(cluster list $rootTenant | grep $clusterName | awk ' { print $4; }')
networkA=VSAN_11
networkB=VSAN_12
host_create_4i h1$hostseed $clusterId 10 11 12 13 $networkA $networkB
host_create_4i h2$hostseed $clusterId 20 21 22 23 $networkA $networkB
host_create_4i h3$hostseed $clusterId 30 31 32 33 $networkA $networkB
host_create_4i h4$hostseed $clusterId 40 41 42 43 $networkA $networkB


# Control over running individual parts of the test (true/false)
volnameA=${volnameA:-"adjPathsA$hostseed"}
volnameB=${volnameB:-"adjPathsB$hostseed"}
volnameC=${volnameC:-"adjPathsC$hostseed"}
volnameD=${volnameD:-"adjPathsD$hostseed"}
volnameE=${volnameE:-"adjPathsE$hostseed"}

source subs/volume
echo SITE1 $SITE1 
volume_create $volnameA $SITE1 ${SITE1}_Local ""

# Test single host using VPLEX local in SITE1; note only VSAN11 talks to cluster1
vplexSingleHost() {
    echoit "Testing VPLEX local single host"
    run export_group create $project eg1 $SITE1 --type Host --hosts h1$hostseed --volspec $project/$volnameA
    pathadj $project/eg1 $vplex --maxpath 4 --pathsperinit 2
    pathadj $project/eg1 $vplex --maxpath 4 --pathsperinit 2 --go 1
    egpaths eg1 
    pathadj $project/eg1 $vplex --maxpath 1 --go 1
    egpaths eg1 
    run_nofail export_group delete $project/eg1
    run_nofail export_group delete $project/eg1
    verifynozones
}
#vplexSingleHost

# Test single host using VMAX in SITE2; note only VSAN12 in SITE2.
source subs/arrayVpools
createArrayVpool vmax2 vmax $SITE2
volume_create $volnameB $SITE2 vmax2 ""
ssys=$(getVolumeSystem $volnameB)
vmaxSingleHost() {
    echoit "Testing VMAX local single host"
    run export_group create $project eg2 $SITE2 --type Host --hosts h1$hostseed --volspec $project/$volnameB
    pathadj $project/eg2 $ssys --maxpath 1 --useexisting 1
    egpaths eg2 
    pathadj $project/eg2 $ssys --maxpath 4 --pathsperinit 2 --go 1
    egpaths eg2 
    pathadj $project/eg2 $ssys --maxpath 1 --go 1
    egpaths eg2 
    run_nofail export_group delete $project/eg2
    run_nofail export_group delete $project/eg2
    verifynozones
}
#vmaxSingleHost

vplexClus1() {
    echoit "Testing VPLEX cluster-1 export to cluster"
    run export_group create $project eg3 $SITE1 --type Cluster --clusters ''/$clusterName --volspec $project/$volnameA
    pathadj $project/eg3 $vplex --maxpath 4 --pathsperinit 2 --go 1
    egpaths eg3
    pathadj $project/eg3 $vplex --maxpath 1 --go 1
    egpaths eg3
    run_nofail export_group delete $project/eg3
    run_nofail export_group delete $project/eg3
    verifynozones
}
#vplexClus1

volume_create $volnameE $SITE1 ${SITE1}_distributed ""
vplexDistributedCrossConnect() {
    echoit "Testing VPLEX cluster-1 distributed to cluster"
    run export_group create $project eg5 $SITE1 --type Cluster --cluster ''/$clusterName --volspec $project/$volnameE
    pathadj $project/eg5 $vplex --varray $SITE2 --maxpath 4 --pathsperinit 2 --go 1
    egpaths eg5 V2_
    pathadj $project/eg5 $vplex --varray $SITE2 --maxpath 4 --pathsperinit 2 --go 1
    egpaths eg5 V2_
    run_nofail export_group delete $project/eg5
    run_nofail export_group delete $project/eg5
    verifynozones
}
vplexDistributedCrossConnect

volume_create $volnameC $SITE1 ${SITE1}_Local ""
volume_create $volnameD $SITE1 ${SITE1}_Local ""
vplexHostClust1() {
   echoit "Testing Cluster and Host export"
   run export_group create $project eg4 $SITE1 --type Host --hosts h1$hostseed --volspec $project/$volnameD
   run export_group create $project eg5 $SITE1 --type Cluster --clusters ''/$clusterName --volspec $project/$volnameC
   # adjust host to two paths
   pathadj $project/eg4 $vplex --maxpath 2 --pathsperinit 1 --go 1
   egpaths eg4
   #adjust cluster to four paths
   pathadj $project/eg5 $vplex --maxpath 4 --pathsperinit 2 --go 1
   egpaths eg5
   #adjust cluster to one path
   pathadj $project/eg5 $vplex --maxpath 1 --pathsperinit 1 --go 1
   egpaths eg5
   # adjust host to four paths
   pathadj $project/eg4 $vplex --maxpath 4 --go 1
   egpaths eg4
   # adjust cluster to four paths, but two ppi, keeping existing paths; this will make paths uneven on hosts
   pathadj $project/eg5 $vplex --maxpath 4 --pathsperinit 2 --useexisting 1 --go 1
   egpaths eg5
   run_nofail export_group delete $project/eg4
   run_nofail export_group delete $project/eg4
   run_nofail export_group delete $project/eg5
   run_nofail export_group delete $project/eg5
   verifynozones
}
vplexHostClust1

echoit "adjustPaths passed"
date

