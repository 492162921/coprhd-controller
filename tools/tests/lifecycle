#!/usr/bin/python
#
# Copyright (c) 2015 EMC Corporation
# All Rights Reserved
#

import argparse
import sys
import os
import time
from bourne import Bourne
S3_PORT = '9021'

#----------------------------------------------------------------------
# lifecycle cli functions
#----------------------------------------------------------------------

def lifecycle_get(args):
    bourne.connect(bourne_data_ip, S3_PORT)
    print bourne.bucket_lifecycle_get(args.namespace, args.bucket,
                                      args.uid, args.secret)

def lifecycle_put(args):
    bourne.connect(bourne_data_ip, S3_PORT)
    bourne.bucket_lifecycle_put(args.namespace, args.bucket, args.rules,
                                args.uid, args.secret)

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

try:
    bourne_data_ip = os.environ['BOURNE_DATA_IPADDR']
except:    
    bourne_data_ip = bourne_ip

# lifecycle <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne lifecycle configuration cli usage.')
parser.add_argument('cmd', help = """cmd = (get | put);
example of rule:
'{"rules": [{"id": "r1", "prefix": "a/", "status": "Enabled", "expiration": {"days": 1}},
{"id": "r2", "prefix": "b/", "status": "Enabled", "expiration": {"date": "2014-01-01T10:10:10Z"}}]}'""")
parser.add_argument('--ip', metavar = 'ipaddr', help = 'IP address of bourne', default=bourne_ip)
parser.add_argument('--uid', metavar = 'uid', help = 'user id', default = 'sysadmin')
parser.add_argument('--secret', metavar = 'secret', help = 'user secret key', default = 'secret')

# get lifecycle status
get = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
get.add_argument('namespace', help = 'namespace of the tenant')
get.add_argument('bucket', help = 'name of the bucket')

# set lifecycle status
put = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
put.add_argument('namespace', help = 'namespace of the tenant')
put.add_argument('bucket', help = 'name of the bucket')
put.add_argument('rules', help = 'rules of lifecycle')

#----------------------------------------------------------------------
# Main script
#----------------------------------------------------------------------

try:
    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        cmd = None

    bourne = Bourne()

    if (cmd == "get"):
        args = get.parse_args()
        lifecycle_get(args)
    elif (cmd == "put"):
        args = put.parse_args()
        lifecycle_put(args)
    else:
        parser.print_help()
except:
    raise
