#!/usr/bin/python

# 
# Copyright (c) 2012 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.
#

import argparse
import sys
import os
from bourne import Bourne
# OBJCTRL_INSECURE_PORT           = '9010'
# OBJCTRL_PORT                    = '9011'
#----------------------------------------------------------------------
# security cli functions
#----------------------------------------------------------------------
  
def secret_create_key(args):
    bourne.connect(args.ip)
    response = bourne.secret_create_key_user(args.uid, args.existingKeyExpiry)
    try:
    	print response['secret_key']
    except:
    	print "error: ",response
    	 
   
def secret_show_key(args):
    bourne.connect(args.ip)
    response = bourne.secret_show_key_user(args.uid)
    try:
        key = response['secret_key_1']
        if key != None and len(key) != 0:
            print key
       
        key = response['secret_key_2']
        if (not args.onlyone) and  key != None and len(key) != 0:
           print key
    except:
       pass   

def secret_delete_key(args):
    bourne.connect(args.ip)
    response = bourne.secret_delete_key_user(args.uid, args.secretKey)
    if response.status_code != 200 and response.status_code != 204:
    	print response.text

#----------------------------------------------------------------------
# command-line parsing
#----------------------------------------------------------------------

try:
    bourne_ip = os.environ['BOURNE_IPADDR']
except:
    bourne_ip = 'localhost'

# security <cmd> <cmd_args>  [--ip ipaddr]
parser = argparse.ArgumentParser(description = 'Bourne secretkey cli usage.')
parser.add_argument('cmd', help = 'cmd = (add | delete | show)')
parser.add_argument('--ip',    metavar = 'ipaddr',    help = 'IP address of bourne', default=bourne_ip)

# add secret key
add = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
add.add_argument('uid',    help = 'uid to add', default = None)
add.add_argument('--existingKeyExpiry',    help = 'expiry in mins for the existing key (if any)', default = None)

# delete secret key
delete = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
delete.add_argument('uid',    help = 'uid to add', default = None)
delete.add_argument('--secretKey',  metavar = 'secretkey',  help = 'key to delete', default = None)

# show secret key
show = argparse.ArgumentParser(parents = [parser], conflict_handler='resolve')
show.add_argument('uid',    help = 'uid to add', default = None)

try:

    if (len(sys.argv) > 1):
        cmd = sys.argv[1]
    else:
        parser.print_help()
        sys.exit(1)

    bourne = Bourne()

    if(cmd == "add"):
        args = add.parse_args()
        secret_create_key(args)  
    elif(cmd == "delete"):
        args = delete.parse_args()  	
    	secret_delete_key(args)   
    elif(cmd == "show"):
        args = show.parse_args()
    	secret_show_key(args)   
    else:
        parser.print_help()

except:
    raise
