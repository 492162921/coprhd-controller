
package com.emc.vipr.srm.webservice.accessors;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Properties;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.emc.vipr.srm.common.utils.ApplicationContextUtils;
import com.emc.vipr.srm.common.utils.SRMViprConstants;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "DatabaseAccessorService", targetNamespace = "http://www.watch4net.com/APG/Remote/DatabaseAccessorService", wsdlLocation = "http://lgloz092.lss.emc.com:58080/APG-WS/wsapi/db?wsdl")
public class DatabaseAccessorService
    extends Service
{

    private final static Logger logger = LoggerFactory
            .getLogger(DatabaseAccessorService.class);
    private static URL DATABASEACCESSORSERVICE_WSDL_LOCATION;
    private static String apgUserName;
    private static String apgPassword;

    private final static QName DATABASEACCESSORSERVICE_QNAME = new QName(
            "http://www.watch4net.com/APG/Remote/DatabaseAccessorService",
            "DatabaseAccessorService");

    //TODO: As of now keeping or putting this as part of the static block
    // & injecting through spring assumption is that SRM WS is known and added
    //as part of the srm.properties file (since this is a POC)
    // In production this WS service should be created based on user input or 
    // common props, and we might have to revisit this part & the object instantiation part.
    static {

        Properties srmAppProps = (Properties) ApplicationContextUtils
                .getBean("srmAppProps");
        apgUserName = (String) srmAppProps.getOrDefault("apg_username",
                "ws-user");
        apgPassword = (String) srmAppProps.getOrDefault("apg_password",
                "watch4net");

        try {

            StringBuilder builderAPGWS = new StringBuilder();
            builderAPGWS.append(SRMViprConstants.HTTP);

            builderAPGWS
                    .append((String) srmAppProps.getProperty("apg_hostname"));
            builderAPGWS.append(":");
            builderAPGWS.append((String) srmAppProps.getProperty("apg_port"));
            builderAPGWS.append(SRMViprConstants.APG_WS);

            DATABASEACCESSORSERVICE_WSDL_LOCATION = new URL(
                    DatabaseAccessorService.class.getResource("."),
                    builderAPGWS.toString());
        } catch (MalformedURLException ex) {
            logger.error("Failed to create URL for the APG WS : {}",
                    DATABASEACCESSORSERVICE_WSDL_LOCATION);
        }
    }

    public DatabaseAccessorService() {
        super(DATABASEACCESSORSERVICE_WSDL_LOCATION,
                DATABASEACCESSORSERVICE_QNAME);
    }

    public DatabaseAccessorService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    /**
     * 
     * @return returns DatabaseAccessor
     */
    @WebEndpoint(name = "DatabaseAccessorPort")
    public DatabaseAccessor getDatabaseAccessorPort() {
        DatabaseAccessor databaseAccessor = super.getPort(new QName(
                "http://www.watch4net.com/APG/Remote/DatabaseAccessorService",
                "DatabaseAccessorPort"), DatabaseAccessor.class);

        ((BindingProvider) databaseAccessor).getRequestContext()
                .put(BindingProvider.USERNAME_PROPERTY, apgUserName);
        ((BindingProvider) databaseAccessor).getRequestContext()
                .put(BindingProvider.PASSWORD_PROPERTY, apgPassword);
        return databaseAccessor;
    }

    /**
     * 
     * @param features
     *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
     *            on the proxy. Supported features not in the
     *            <code>features</code> parameter will have their default
     *            values.
     * @return returns DatabaseAccessor
     */
    @WebEndpoint(name = "DatabaseAccessorPort")
    public DatabaseAccessor getDatabaseAccessorPort(
            WebServiceFeature... features) {
        return super.getPort(
                new QName(
                        "http://www.watch4net.com/APG/Remote/DatabaseAccessorService",
                        "DatabaseAccessorPort"),
                DatabaseAccessor.class, features);
    }
}
