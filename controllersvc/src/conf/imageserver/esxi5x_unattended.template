vmaccepteula

# ensure there is only one volume (the boot volume) visible to this server.  Do this before formatting anything, just in case.
LINECOUNT=`localcli --format-param=show-header=false storage vmfs extent list | wc -l`
if [ $LINECOUNT != 1 ] ; then
echo "There are ${LINECOUNT} volumes seen by this host.  ViPR supports only a boot volume exposed to the host during OS installation to ensure data integrity of shared volumes"
exit 1
fi

# VBDU TODO [DONE]: VBlock vipr team already fixing ${clear.device} issue where device is null, so first volume is taken.
# VBDU TODO [DONE]: --overwritevmfs should probably be removed for paranoia, too:  "Permit overwriting of vmfs partitions on the specified drives. By default, overwrite vmfs partitions is not allowed."
# VBDU TODO [DONE]: If our use case is strictly around exporting a boot volume, installing, THEN exporting shared volumes, then maybe we can ensure the host only sees one device in the first place before it does anything.
# VBDU TODO [DONE]: This does mean that any attempt to re-use a volume that is already been formatted to vmfs will not be possible, and may require a workaround or cleanup activity.
clearpart ${clear.device}
install ${install.device}
rootpw --iscrypted  ${root.password}
network --addvmportgroup=0 --bootproto=dhcp  
reboot

%pre --interpreter=busybox

%post --interpreter=busybox --ignorefailure=false 
localcli network firewall set --enabled false

# VBDU TODO [DONE]: The issue inserted code for D@T@STORE_SYM_LINK (sic) is that it does NOT guarantee the wwn is datastore1 at all.  And even if it did, it can nott guarantee
# VBDU TODO [DONE]: that is the first lun booted after the system comes back up.  I added the check above to ensure one and only one volume.
# if boot uuid was used, this will create sym link
${DATASTORE_SYM_LINK}
cat /var/log/weasel.log  >> /vmfs/volumes/datastore1/osagent.log 2>&1

echo $(date +"%Y-%m-%d %T") "INFO Executing %post section" >> /vmfs/volumes/datastore1/osagent.log
# Downloading custom wget
i=0
file="/tmp/wget"
while [ ! -s "$file" ] && [ $i -lt 5 ]
do
wget http://${http.ip}:${http.port}/wget -O /tmp/wget
i=$((i+1))
if [ ! -s "$file" ]
then sleep 5
fi
done
if [ ! -s "$file" ]
then
wget http://${http.ip}:${http.port}/failure/${session.id}
exit 1
fi
chmod u+x /tmp/wget
# Download first boot
/tmp/wget http://${http.ip}:${http.port}/fb/${session.id} /vmfs/volumes/datastore1/esxi-firstboot.sh >> /vmfs/volumes/datastore1/osagent.log 2>&1
# Check whether the attachment was succesfully downloaded: vmfs-volumes-datastore1-esxi-firstboot.sh
file="/vmfs/volumes/datastore1/esxi-firstboot.sh"
if [ -s "$file" ] 
then echo $(date +"%Y-%m-%d %T") "INFO esxi-firstboot.sh was correctly downloaded" >> /vmfs/volumes/datastore1/osagent.log
else
echo $(date +"%Y-%m-%d %T") "ERROR An error has occurred while downloading esxi-firstboot.sh" >> /vmfs/volumes/datastore1/osagent.log
echo $(date +"%Y-%m-%d %T") "INFO Setting the session status to FAILED" >> /vmfs/volumes/datastore1/osagent.log
/tmp/wget http://${http.ip}:${http.port}/failure/${session.id} >> /vmfs/volumes/datastore1/osagent.log 2>&1
exit 1
fi
# Change file permissions
chmod 700 /vmfs/volumes/datastore1/esxi-firstboot.sh >> /vmfs/volumes/datastore1/osagent.log 2>&1
# done
echo $(date +"%Y-%m-%d %T") "INFO Setting the session status to DEPLOYED" >> /vmfs/volumes/datastore1/osagent.log
/tmp/wget http://${http.ip}:${http.port}/success/${session.id} >> /vmfs/volumes/datastore1/osagent.log 2>&1
echo $(date +"%Y-%m-%d %T") "INFO Rebooting target " >> /vmfs/volumes/datastore1/osagent.log

%firstboot --interpreter=busybox
echo $(date +"%Y-%m-%d %T") "INFO Executing %firstboot section" >> /vmfs/volumes/datastore1/osagent.log
echo $(date +"%Y-%m-%d %T") "INFO Executing FIRST_BOOT script provided by the user" >> /vmfs/volumes/datastore1/osagent.log
{ rm /vmfs/volumes/datastore1/esxi-firstboot.sh && awk -v RS="\r" -v ORS="" {print} > /vmfs/volumes/datastore1/esxi-firstboot.sh; } < /vmfs/volumes/datastore1/esxi-firstboot.sh
chmod 700 /vmfs/volumes/datastore1/esxi-firstboot.sh  # restore the permissions the rm/awk pair just zapped
/vmfs/volumes/datastore1/esxi-firstboot.sh >> /vmfs/volumes/datastore1/osagent.log 2>&1
