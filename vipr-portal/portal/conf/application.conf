#webservice=util.WSAsync

# This is the main configuration file for the application.
# ~~~~~

@include.application.conf=application-var.conf

application.name=Portal
application.version=6.7-dev

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%prod.application.mode=prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=SX6Sqhs6ZppjtRR7NFovwdrOzX8Us7ntL163Iz9d5gWnt9ZDmc9vHYwbJortCBhN

# Used by ISA to salt hashed passwords in the database
application.salt=qy0jFrlO2wEqkrA

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja 	

# Date format
# ~~~~~
date.format=yyyy-MM-dd
time.format=dd-MM-yyyy HH:mm:ss
date.fullFormat=d MMM yyyy hh:mm a z
# date.format.fr=dd/MM/yyyy

keystore.file=conf/keystore
%prod.keystore.file=../../storageos/conf/keystore
%prod.certificate.password=changeit
keystore.password=changeit
trustmanager.algorithm=JKS
ssl.KeyManagerFactory.algorithm=SunX509

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
application.session.cookie=ViPRUI
application.session.secure=true
# application.session.maxAge=1h
application.session.httpOnly=true

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
java.source=1.6
jvm.memory=-Xms128M -Xmx768m -server -XX:PermSize=128m -XX:MaxPermSize=256m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled
%prod.jvm.memory=-Xms768M -Xmx768m -XX:PermSize=128m -XX:MaxPermSize=256m -server

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
application.log=DEBUG
%prod.application.log=INFO

# More logging configuration
application.log.path=/log4j.properties
%prod.application.log.path=/log4j-prod.properties
%prod.application.log.system.out=off

# Database configuration
# ~~~~~ 
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
db=mem
#
# To connect to a local MySQL5 database, use:
# db=mysql://user:pwd@host/database
#
# To connect to a local PostgreSQL9 database, use:
# db=postgres://user:pwd@host/database
#
# If you need a full JDBC configuration use the following :
# db.url=jdbc:postgresql:database_name
# db.url=jdbc:h2:mem:play;MODE=POSTGRESQL
# db.driver=org.postgresql.Driver
# db.user=root
# db.pass=secret

# Old prod database
#db.url=jdbc:postgresql://localhost:2345/isa
#db.driver=org.postgresql.Driver
#db.user=isa
#db.pass=isa

#
# Connections pool configuration :
db.pool.timeout=10000
# db.pool.maxSize=30
# db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use. Set to none to disable it 
# (default to update in DEV mode, and none in PROD mode):
jpa.ddl=create-drop
#jpa.ddl=update

#
# Debug SQL statements (logged using DEBUG level):
# jpa.debugSQL=true
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...
#

# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~ 
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
http.cacheControl=604800
http.exposePlayServer = false
# Increase the maximum parameters allowed (defaults to 1000)
http.maxParams=10000

# Restrict Cipher suites to strong ciphers
%prod.play.ssl.enabledCiphers = TLS_RSA_WITH_AES_128_CBC_SHA

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS orders
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer
#mail.smtp=mock

# Or, specify mail host configuration
# mail.smtp.host=127.0.0.1
# mail.smtp.user=admin
# mail.smtp.pass=
# mail.smtp.channel=ssl

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/

internalApplication.baseUrl=http://127.0.0.1:9000

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10
play.jobs.pool=50

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all orders (very useful for debugging purpose)
# play.pool=3
play.pool=50

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files 
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
#%test.module.cobertura=${play.path}/modules/cobertura
%test.application.mode=dev
%test.db.url=jdbc:h2:mem:play;MODE=POSTGRESQL;LOCK_MODE=0
%test.jpa.ddl=create
%test.mail.smtp=mock

## Custom Configuration

# Configuration for the Deadbolt Authorization module
deadbolt.handler=controllers.security.StorageOSDeadboltHandler
deadbolt.cache-user-per-order=true

#
## Application Configuration
#

# Support HTTP Load balancers
XForwardedSupport=all

# Mailer notification
mailer.enabled = false
mail.smtp.from = Admin <admin@test.com>

# DBClient config
dbClient=spring
dbClient.spring.context=dbclient-dev.xml
%prod.dbClient.spring.context=dbclient-prod.xml

# Port that the Authentication Service is running on
authsvc.port=4443

# Branding
branding.brand=dellbranding

# ViPR Settings
storageos.api.debugging=true

# Special development mode for running Storage Automator only
# ViPR instance is set up to use a remote location
# - Authentication uses root/ChangeMe against remote ViPR
# - Uses local cassandra DB Client
%saonly.deadbolt.handler=controllers.security.DummyDeadboltHandler
%saonly.dbClient=local

# Special development mode for running the portal only
# - Authentication uses root/ChangeMe against remote ViPR
# - Uses in memory DB Client
%portalonly.deadbolt.handler=controllers.security.DummyDeadboltHandler
%portalonly.dbClient=memory

# Special development mode for running without nginx setup
%nonginx.authsvc.port=7443
%nonginx.disable.nginx=true

# Test mode
%test.deadbolt.handler=controllers.security.DummyDeadboltHandler
%test.dbClient=memory

vipr.client.timeout.minutes = 5
